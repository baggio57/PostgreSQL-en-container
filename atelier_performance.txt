atelier performance

-------
optimiser une instance postgresql :

zone de memoire partagees => shared_buffers => idealement la taille de toutes les donnees actives  (si trop bas il peux y avoir des degradations)
pas facile à bien configurer, il ne faut pas  mettre toute la ram => 25% de la ram ....jusqu'à 8 go max...utiliser les huges_pages si plus de 8 go !!!
huge_pages permet d'economiser de la memoire ...et en temps de cpu !!!


work_mem => tris en memoire , aggregat

creation d'index, vacuum (maintenance_work_mem) => moins critique => on peut faire un set maintenance_work_mem = 4....juste avant la creation d'index...

mettre le parametre noyeau = over_commit_memory=2

un bloc memoire a une taille de 8 ko !!!!


max_wal_size => lie au mecanisme du checkpoint (environ toutes les 5 minutes)..tout ce qui est en cache est synchronise sur le disque....si trop petit, 
tout le bloc qui est ecrit et don on aura bcp plus de FPI et donc les I/O

wal => journaux de transaction qui s'accumulent....

parametrage autovacuum (contenir la fragmentation) : c'est assez complexe, il fait bcp de chose : contenir la gragmenattion, si grosses tables  ou 
bcp de tables, i lfaut baisser la regulation..pour eviter de consommer bcp de ressourses...
vacuum nettoie la table et les index qui sont associes

jit : à desactiver globalement

max_worker_processes, max_parallel_[maintenance]_workers => la parallelisation existe depuis la version 10 => 

---------------------

surveiller l'activite sql
- quelles sont les requetes lentes
- quelles sont les requetes les plusnfrequentes
- quelle requettes generent des fichiers temporaires
- quelles sont les requetes bloquees, et par qui ...
- progression d'une requete de maintenance


pour tracer les requertes executees :
- log_min_duration_statements
- log_min_duration_sample

trace des fichiers temporaires : log_temp_files = 0 (trace tous les fichierd temporaires) 
---------------
framentation des tables et index :
permet d'adapter le comportement de l'autovacuum sur les tables et surtout si bcp de tables ou grosses tables

utilser : pgstattuple (tres precis).

---------------------
param du planificateur

element tres important le parametrage de : join_collapse_limit (defaut = 8). si requete avec bcp de jointures...il peut-etre utile d'augmenter 
cette valeur au moins pour la requete en cours

---------------------
la comande EXPLAIN : nous donne le plan d'execution....(option : analyze, buffers)
---------------------

----------------------------
[postgres@localhost data]$ cat postgresql.auto.conf
# Do not edit this file manually!
# It will be overwritten by the ALTER SYSTEM command.

log_line_prefix = '%t [%p]: user=%u,db=%d,app=%a,client=%h '
log_checkpoints = on
log_connections = on
log_disconnections = on
log_lock_waits = on
log_temp_files = 0
log_autovacuum_min_duration = 0
log_error_verbosity = default
log_min_duration_statement = 0
lc_messages = 'C'
autovacuum = off
max_parallel_workers_per_gather = 0
jit = off
shared_buffers = 300MB
join_collapse_limit = 2
shared_preload_libraries='pg_stat_statements'[postgres@localhost data]$
-----------------------------------------------

executer la commande psql puis :

postgres=# alter system set shared_buffers='2GB'; permet de modifier la valeur du param ; ce param demande une relance de service !!!!
ALTER SYSTEM

postgres=# show shared_buffers ;
 shared_buffers
----------------
 300MB

postgres=# select pg_reload_conf(); pour les parametres qui n'ont pas besoin de relancer le service et donc une coupure de service
 pg_reload_conf
----------------
 t
--------
--------------------
sudo -iu postgres => pour se mettre en user postgres
-----------

exercice : requete 1

pour afficher la description d'une table :

\d+ votes;

apres un ajout d'index faire :

effectuer : analyze votes;

puis on refait :

 explain (analyse) SELECT * FROM users u
JOIN votes v ON (u.id = v.userid) AND v.votetypeid = 5
JOIN votes v2 ON (u.id = v2.userid) AND v2.votetypeid = 6
JOIN votes v3 ON (u.id = v3.userid) AND v3.votetypeid = 8
JOIN votes v4 ON (u.id = v4.userid) AND v4.votetypeid = 10
JOIN votes v5 ON (u.id = v5.userid) AND v5.votetypeid = 4;

puis :
stack=# alter system set join_collapse_limit='8';
ALTER SYSTEM

puis : select pg_reload_conf();

la requete est nettement plus rapide !!!

----------------
exercice requete 2 : il faut faire un index focntionnel , il faut utiliser la meme focntion pour pouvoir comparer la meme valeur (extraxt...).

-----------